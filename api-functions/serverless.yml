org: dbkompare
app: db-kompare
service: api-functions
configValidationMode: error

useDotenv: true

custom:
  lambdaInitialArn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}
  databasesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DATABASES_TABLE}
  metricesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.METRICES_TABLE}
  databaseRankingTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.RANKING_TABLE}
  usersTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USERS_TABLE}
  blogsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.BLOGS_TABLE}
  savedBlogsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.SAVED_BLOGS_TABLE}
  trackingResourcesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TRACKING_RESOURCES_TABLE}
  dbToolCategoriesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DB_TOOL_CATEGORIES_TABLE}
  dbToolsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DB_TOOLS_TABLE}
  dbToolsMetricesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DB_TOOLS_METRICES_TABLE}
  dbToolsRankingsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DB_TOOLS_RANKINGS_TABLE}
  questionsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.QUESTIONS_TABLE}
  tagsTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TAGS_TABLE}
  companiesTableArn: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.COMPANIES_TABLE}

  COGNITO_CALLBACK_URLS:
    dev:
      urls:
        - http://localhost:3000/auth
        - https://db-kompare-frontend.vercel.app
        - https://db-kompare-frontend.vercel.app/auth
  COGNITO_LOGOUT_URLS:
    dev:
      urls:
        - http://localhost:3000
        - https://db-kompare-frontend.vercel.app
  serverless-offline:
    httpPort: 4000

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  profile: dbkompare
  environment:
    DATABASES_TABLE: db-kompare-databases-${self:provider.stage}
    BLOGS_TABLE: db-kompare-blogs-${self:provider.stage}
    SAVED_BLOGS_TABLE: db-kompare-saved-blogs-${self:provider.stage}
    METRICES_TABLE: db-kompare-metrices-${self:provider.stage}
    RANKING_TABLE: db-kompare-database-rankings-${self:provider.stage}
    USERS_TABLE: db-kompare-users-${self:provider.stage}
    TRACKING_RESOURCES_TABLE: db-kompare-tracking-resources-${self:provider.stage}
    DB_TOOL_CATEGORIES_TABLE: db-kompare-dbtools-categories-${self:provider.stage}
    DB_TOOLS_TABLE: db-kompare-dbtools-${self:provider.stage}
    DB_TOOLS_METRICES_TABLE: db-kompare-dbtools-metrices-${self:provider.stage}
    DB_TOOLS_RANKINGS_TABLE: db-kompare-dbtools-rankings-${self:provider.stage}
    QUESTIONS_TABLE: db-kompare-questions-${self:provider.stage}
    TAGS_TABLE: db-kompare-tags-${self:provider.stage}
    COMPANIES_TABLE: db-kompare-companies-${self:provider.stage}
    STACK_API_KEY: ${env:STACK_API_KEY}
    GITHUB_TOKEN: ${env:GITHUB_TOKEN}
    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    GOOGLE_CSE_ID: ${env:GOOGLE_CSE_ID}
    BING_API_KEY: ${env:BING_API_KEY}
    CLIENT_ID: ${env:CLIENT_ID}
    CLIENT_SECRET: ${env:CLIENT_SECRET}
    GITHUB_CLIENT_ID: ${env:GITHUB_CLIENT_ID}
    GITHUB_CLIENT_SECRET: ${env:GITHUB_CLIENT_SECRET}
    ADMIN_EMAIL: ${env:ADMIN_EMAIL}
    SOURCE_EMAIL: ${env:SOURCE_EMAIL}

    # LINKEDIN_CLIENT_ID: ${env:LINKEDIN_CLIENT_ID}
    # LINKEDIN_CLIENT_SECRET: ${env:LINKEDIN_CLIENT_SECRET}

  apiGateway:
    apiKeys:
      - name: myFirstKey

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - ${self:custom.databasesTableArn}/index/byStatus
            - ${self:custom.questionsTableArn}/index/byStatus
            - ${self:custom.tagsTableArn}/index/byStatus
            - ${self:custom.companiesTableArn}/index/byStatus
            - ${self:custom.blogsTableArn}/index/byStatus
            - ${self:custom.dbToolCategoriesTableArn}/index/byStatus
            - ${self:custom.dbToolsTableArn}/index/byStatus
            - ${self:custom.dbToolsTableArn}/index/byCategoryAndStatus
            - ${self:custom.blogsTableArn}/index/byIsPublished
            - ${self:custom.usersTableArn}/index/byEmail
            - ${self:custom.metricesTableArn}/index/byStatusAndDate
            - ${self:custom.dbToolsMetricesTableArn}/index/byStatusAndDate
            - ${self:custom.databaseRankingTableArn}/index/byStatusAndDate
            - ${self:custom.dbToolsRankingsTableArn}/index/byStatusAndDate
            - ${self:custom.savedBlogsTableArn}/index/BlogIdIndex
            - ${self:custom.trackingResourcesTableArn}/index/DateTableNameIndex
            - ${self:custom.databasesTableArn} # Permission for databases table
            - ${self:custom.metricesTableArn} # Permission for metrices table
            - ${self:custom.blogsTableArn} # Permission for blogs table
            - ${self:custom.databaseRankingTableArn} # Permission for database rankings table
            - ${self:custom.dbToolCategoriesTableArn} # Permission for db tools categories table
            - ${self:custom.dbToolsMetricesTableArn} # Permission for db tools metrices table
            - ${self:custom.dbToolsTableArn} # Permission for db tools table
            - ${self:custom.usersTableArn} # Permission for users table
            - ${self:custom.savedBlogsTableArn} # Permission for saved Blogs table
            - ${self:custom.trackingResourcesTableArn} # Permission for tracking resorces table
            - ${self:custom.dbToolsRankingsTableArn} # Permission for tracking resorces table
          # Cognito Permissions for AdminAddUserToGroup
        - Effect: Allow
          Action:
            - cognito-idp:*
            - ses:SendEmail
          Resource:
            - arn:aws:cognito-idp:eu-west-1:253490764757:userpool/eu-west-1_NGNKtdSEL
            - arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:provider.environment.SOURCE_EMAIL}
            - arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:provider.environment.ADMIN_EMAIL}
functions:
  postConfirmation:
    handler: functions/auth/postConfirmation.handler
    environment:
      COGNITO_USER_POOL_ID: !Ref DbKompare

  githubAccessToken:
    handler: functions/auth/githubAccessTokenHandler.handler
    events:
      - http:
          path: /oauth/github/access-token
          method: post

  githubUserInfo:
    handler: functions/auth/githubUserInfoHandler.handler
    events:
      - http:
          path: /oauth/github/user-info
          method: get

  createDatabase:
    handler: functions/databases/createDatabase.handler
    events:
      - http:
          path: /create-database
          method: post
          private: true
          cors: true

  getallDatabases:
    handler: functions/databases/getAllDatabases.handler
    events:
      - http:
          path: /get-databases
          method: get
          private: true
          cors: true

  getUserById:
    handler: functions/users/getUserById.handler
    events:
      - http:
          path: /get-user
          method: get
          private: true
          cors: true

  isUserExistInDB:
    handler: functions/auth/isUserExistInDB.handler
    events:
      - http:
          path: /is-user-exist
          method: get
          private: true
          cors: true

  updateUserDetails:
    handler: functions/users/updateUserDetails.handler
    events:
      - http:
          path: /update-user
          method: post
          private: true
          cors: true
    environment:
      COGNITO_USER_POOL_ID: !Ref DbKompare

  createAdminUser:
    handler: functions/users/createAdminUser.handler
    events:
      - http:
          path: /create-admin-user
          method: post
          private: true
          cors: true
    environment:
      COGNITO_USER_POOL_ID: !Ref DbKompare

  getRankings:
    handler: functions/rankings/getRankings.handler
    events:
      - http:
          path: /get-rankings
          method: post
          private: true
          cors: true
  getDbToolRanking:
    handler: functions/rankings/getDbToolRanking.handler
    events:
      - http:
          path: /get-dbtool-rankings
          method: post
          private: true
          cors: true

  getBlogs:
    handler: functions/blogs/getBlogs.handler
    events:
      - http:
          path: /get-blogs
          method: get
          private: true
          cors: true
  getSavedBlogs:
    handler: functions/blogs/getSavedBlogs.handler
    events:
      - http:
          path: /get-saved-blogs
          method: get
          private: true
          cors: true
  createBlog:
    handler: functions/blogs/createBlog.handler
    events:
      - http:
          path: /create-blog
          method: post
          private: true
          cors: true
  savedBlog:
    handler: functions/blogs/savedBlog.handler
    events:
      - http:
          path: /save-blog
          method: post
          private: true
          cors: true
  editBlog:
    handler: functions/blogs/editBlog.handler
    events:
      - http:
          path: /edit-blog
          method: put
          private: true
          cors: true

  getBlog:
    handler: functions/blogs/getBlogById.handler
    events:
      - http:
          path: /get-blog/{id}
          method: get
          private: true
          cors: true
  deleteBlog:
    handler: functions/blogs/deleteBlog.handler
    events:
      - http:
          path: delete-blog
          method: delete
          cors: true
          private: true

  addDbToolCategory:
    handler: functions/dbtools-categories/addDbToolCategory.handler
    events:
      - http:
          path: /add-dbtool-category
          method: post
          cors: true
          private: true

  getDbToolCategories:
    handler: functions/dbtools-categories/getDbToolCategories.handler
    events:
      - http:
          path: /get-dbtool-categories
          method: get
          cors: true
          private: true
  getDbTools:
    handler: functions/dbtools/getDbTools.handler
    events:
      - http:
          path: /get-dbtools
          method: get
          cors: true
          private: true
  getDbToolsByCategory:
    handler: functions/dbtools/getDbToolsByCategory.handler
    events:
      - http:
          path: /get-dbtools-by-category/{category_id}
          method: get
          cors: true
          private: true
  
  getDbToolsByIds:
    handler: functions/dbtools/getDbToolsByIds.handler
    events:
      - http:
          path: /get-dbtools-by-ids
          method: post
          cors: true
          private: true

  editDbToolCategory:
    handler: functions/dbtools-categories/editDbToolCategory.handler
    events:
      - http:
          path: /edit-dbtool-category
          method: put
          cors: true
          private: true

  getDatabasesByIds:
    handler: functions/databases/getDatabaseByIds.handler
    events:
      - http:
          path: /get-database-by-ids
          method: post
          cors: true
          private: true

  addMetrices:
    handler: functions/metrices/addMetrices.handler
    timeout: 300
    events:
      - http:
          path: /add-metrices
          method: post
          cors: true
          private: true

  getMetrices:
    handler: functions/metrices/getMetrices.handler
    events:
      - http:
          path: /get-metrices
          method: post
          cors: true
          private: true
  
  getDbToolMetrices:
    handler: functions/dbtools-metrices/getDbToolMetrices.handler
    events:
      - http:
          path: /get-dbtools-metrices
          method: post
          cors: true
          private: true

  getDatabasesCount:
    handler: functions/databases/getDatabasesCount.handler
    events:
      - http:
          path: /get-databases-count
          method: get
          cors: true
          private: true
  
  getDbToolsCount:
    handler: functions/dbtools/getDbToolsCount.handler
    events:
      - http:
          path: /get-dbtools-count
          method: get
          cors: true
          private: true

  
  # DB TOOL GITHUB METRICES SCHEDULE
  getDbToolGithubMetrices:
    handler: functions/dbtools-metrices/getDbToolGithubMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 6 * * ? *) # First job at 6:00 AM UTC
      - schedule:
          rate: cron(5 6 * * ? *) # Second job at 6:05 AM UTC
      - schedule:
          rate: cron(10 6 * * ? *) # Third job at 6:10 AM UTC
      - schedule:
          rate: cron(15 6 * * ? *) # Fourth job at 6:15 AM UTC
      - schedule:
          rate: cron(20 6 * * ? *) # Fifth job at 6:20 AM UTC
      - schedule:
          rate: cron(25 6 * * ? *) # Sixth job at 6:25 AM UTC
      - schedule:
          rate: cron(30 6 * * ? *) # Sixth job at 6:30 AM UTC

  # DB TOOL STACKOVERFLOW METRICES SCHEDULE
  getDbToolStackoverflowMetrices:
    handler: functions/dbtools-metrices/getDbToolStackoverflowMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 6 * * ? *) # First job at 6:00 AM UTC
      - schedule:
          rate: cron(5 6 * * ? *) # Second job at 6:05 AM UTC
      - schedule:
          rate: cron(10 6 * * ? *) # Third job at 6:10 AM UTC
      - schedule:
          rate: cron(15 6 * * ? *) # Fourth job at 6:15 AM UTC
      - schedule:
          rate: cron(20 6 * * ? *) # Fifth job at 6:20 AM UTC

  # DB TOOL GOOGLE METRICES SCHEDULE
  getDbToolGoogleMetrices:
    handler: functions/dbtools-metrices/getDbToolGoogleMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(30 6 * * ? *) # Runs daily at 6:30 AM UTC

  # DB TOOL BING METRICES SCHEDULE
  getDbToolBingMetrices:
    handler: functions/dbtools-metrices/getDbToolBingMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(40 6 * * ? *) # Runs daily at 6:40 AM UTC

  # DB TOOL POPULARITY UPDATE SCHEDULE
  updateDbToolPopularity:
    handler: functions/dbtools-metrices/updateDbToolPopularity.handler
    events:
      - schedule:
          rate: cron(45 6 * * ? *) # Runs daily at 6:45 AM UTC

  # DB TOOL RANKING UPDATE SCHEDULE
  addDbToolRanking:
    handler: functions/rankings/addDbToolRanking.handler
    events:
      - schedule:
          rate: cron(50 6 * * ? *) # Runs daily at 6:50 AM UTC

  # DATABASE GITHUB METRICES SCHEDULE
  getGithubMetrices:
    handler: functions/metrices/getGithubMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 5 * * ? *) # First job at 5:00 AM UTC
      - schedule:
          rate: cron(5 5 * * ? *) # Second job at 5:05 AM UTC
      - schedule:
          rate: cron(10 5 * * ? *) # Third job at 5:10 AM UTC
      - schedule:
          rate: cron(15 5 * * ? *) # Fourth job at 5:15 AM UTC
      - schedule:
          rate: cron(20 5 * * ? *) # Fifth job at 5:20 AM UTC
      - schedule:
          rate: cron(25 5 * * ? *) # Sixth job at 5:25 AM UTC
      - schedule:
          rate: cron(30 5 * * ? *) # Seventh job at 5:30 AM UTC
      - schedule:
          rate: cron(35 5 * * ? *) # Eighth job at 5:35 AM UTC
      - schedule:
          rate: cron(40 5 * * ? *) # Ninth job at 5:40 AM UTC
      - schedule:
          rate: cron(45 5 * * ? *) # Tenth job at 5:45 AM UTC

  # DATABASE STACKOVERFLOW METRICES SCHEDULE
  getStackoverflowMetrices:
    handler: functions/metrices/getStackoverflowMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 5 * * ? *) # First job at 5:00 AM UTC
      - schedule:
          rate: cron(5 5 * * ? *) # Second job at 5:05 AM UTC
      - schedule:
          rate: cron(10 5 * * ? *) # Third job at 5:10 AM UTC
      - schedule:
          rate: cron(15 5 * * ? *) # Fourth job at 5:15 AM UTC
      - schedule:
          rate: cron(20 5 * * ? *) # Fifth job at 5:20 AM UTC
      - schedule:
          rate: cron(25 5 * * ? *) # Sixth job at 5:25 AM UTC
  
  # DATABASE GOOGLE METRICES SCHEDULE
  getGoogleMetrices:
    handler: functions/metrices/getGoogleMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(50 5 * * ? *) # Runs daily at 5:50 AM UTC
  
  # DATABASE BING METRICES SCHEDULE
  getBingMetrices:
    handler: functions/metrices/getBingMetrices.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 6 * * ? *) # Runs daily at 6:00 AM UTC
  
  
  # DATABASE POPULARITY UPDATE SCHEDULE
  updatePopularity:
    handler: functions/metrices/updatePopularity.handler
    events:
      - schedule:
          rate: cron(5 6 * * ? *) # Runs daily at 6:05 AM UTC

  # DATABASE RANKING UPDATE SCHEDULE
  addRanking:
    handler: functions/rankings/addRanking.handler
    events:
      - schedule:
          rate: cron(10 6 * * ? *) # Runs daily at 6:10 AM UTC

resources:
  Resources:
    DbKompare:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: Db-Kompare-${self:provider.stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
          - AttributeDataType: String
            Mutable: true
            Name: name
            Required: true
          - AttributeDataType: String
            Mutable: true
            Name: role
            Required: false
          - AttributeDataType: String
            Mutable: true
            Name: status
            Required: false
          - AttributeDataType: String
            Mutable: true
            Name: userId
            Required: false
        LambdaConfig:
          PostConfirmation: arn:aws:lambda:eu-west-1:253490764757:function:api-functions-${self:provider.stage}-postConfirmation
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      # DependsOn:
      #   - GitHubIdentityProvider
      Properties:
        ClientName: Db-Kompare-Web-${self:provider.stage}
        GenerateSecret: false
        UserPoolId: !Ref DbKompare
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 1
        AuthSessionValidity: 15
        TokenValidityUnits:
          AccessToken: days
          IdToken: days
          RefreshToken: days
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - profile
          - email
          - openid
        CallbackURLs: ${self:custom.COGNITO_CALLBACK_URLS.${self:provider.stage}.urls}
        LogoutURLs: ${self:custom.COGNITO_LOGOUT_URLS.${self:provider.stage}.urls}
        SupportedIdentityProviders:
          - COGNITO
          - Google
          - GitHub
          # - LinkedIn

    GoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        ProviderType: Google
        UserPoolId: !Ref DbKompare
        AttributeMapping:
          email: email
          name: name
          picture: picture
        ProviderDetails:
          client_id: ${env:CLIENT_ID}
          client_secret: ${env:CLIENT_SECRET}
          authorize_scopes: "profile email openid"
    GitHubIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: GitHub
        ProviderType: OIDC
        UserPoolId: !Ref DbKompare
        AttributeMapping:
          email: email
          name: name
        ProviderDetails:
          client_id: ${env:GITHUB_CLIENT_ID}
          client_secret: ${env:GITHUB_CLIENT_SECRET}
          authorize_scopes: "user openid"
          oidc_issuer: https://github.com
          authorize_url: https://github.com/login/oauth/authorize
          token_url: https://b8iy915ig0.execute-api.eu-west-1.amazonaws.com/dev/oauth/github/access-token
          attributes_url: https://b8iy915ig0.execute-api.eu-west-1.amazonaws.com/dev/oauth/github/user-info
          jwks_uri: https://b8iy915ig0.execute-api.eu-west-1.amazonaws.com/dev/oauth/github/access-token
          attributes_request_method: GET
    # LinkedInIdentityProvider:
    #   Type: AWS::Cognito::UserPoolIdentityProvider
    #   Properties:
    #     ProviderName: LinkedIn
    #     ProviderType: OIDC
    #     UserPoolId: !Ref DbKompare
    #     AttributeMapping:
    #       email: email
    #       name: name
    #     ProviderDetails:
    #       client_id: ${env:LINKEDIN_CLIENT_ID}
    #       client_secret: ${env:LINKEDIN_CLIENT_SECRET}
    #       authorize_scopes: "profile email openid"
    #       oidc_issuer: https://www.linkedin.com
    #       authorize_url: https://www.linkedin.com/oauth/v2/authorization
    #       token_url: https://www.linkedin.com/oauth/v2/accessToken
    #       attributes_url: https://api.linkedin.com/v2/userinfo
    #       jwks_uri: https://www.linkedin.com/oauth/openid/jwks
    #       attributes_request_method: GET

    DBKompareUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: dbkompare-auth-${self:provider.stage}
        UserPoolId: !Ref DbKompare
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: Db-Kompare-${self:provider.stage}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ProviderName: !GetAtt DbKompare.ProviderName
            ClientId: !Ref UserPoolClient

    UnauthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: CognitoUnauthorizedPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                  Resource: "*"

    CognitoAuthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: CognitoAuthorizedPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                    - cognito-identity:*
                  Resource: "*"

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthorizedRole.Arn
          unauthenticated: !GetAtt UnauthorizedRole.Arn
    UserPoolInvokePostConfirmationLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref PostConfirmationLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt DbKompare.Arn

    VendorGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: VENDORS
        UserPoolId: !Ref DbKompare
    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ADMINS
        UserPoolId: !Ref DbKompare
